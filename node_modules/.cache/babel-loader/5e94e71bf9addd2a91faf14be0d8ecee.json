{"ast":null,"code":"import _defineProperty from \"C:/Games/marvel/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Games/marvel/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n      defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$attribute = options.attribute,\n      defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n      _options$modeStorageK = options.modeStorageKey,\n      defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n      _options$colorSchemeS = options.colorSchemeStorageKey,\n      defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n      _options$defaultMode = options.defaultMode,\n      designSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      designSystemShouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n      resolveTheme = options.resolveTheme,\n      excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? defaultModeStorageKey : _ref$modeStorageKey,\n        _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n        colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? defaultColorSchemeStorageKey : _ref$colorSchemeStora,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? defaultAttribute : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? designSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n        _ref$disableTransitio = _ref.disableTransitionOnChange,\n        disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n        _ref$storageWindow = _ref.storageWindow,\n        storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n        _ref$documentNode = _ref.documentNode,\n        documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n        _ref$colorSchemeNode = _ref.colorSchemeNode,\n        colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n        _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n        colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec,\n        _ref$shouldSkipGenera = _ref.shouldSkipGeneratingVar,\n        shouldSkipGeneratingVar = _ref$shouldSkipGenera === void 0 ? designSystemShouldSkipGeneratingVar : _ref$shouldSkipGenera;\n    var hasMounted = React.useRef(false);\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        _themeProp$components = themeProp.components,\n        components = _themeProp$components === void 0 ? {} : _themeProp$components,\n        cssVarPrefix = themeProp.cssVarPrefix,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      colorSchemeStorageKey: colorSchemeStorageKey,\n      defaultMode: defaultMode,\n      storageWindow: storageWindow\n    }),\n        mode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        colorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var calculatedMode = function () {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    }();\n\n    var calculatedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    var _cssVarsParser = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar: shouldSkipGeneratingVar\n    }),\n        rootCss = _cssVarsParser.css,\n        rootVars = _cssVarsParser.vars; // 3. Start composing the theme object\n\n\n    var theme = _extends({}, restThemeProp, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n          css = _cssVarsParser2.css,\n          vars = _cssVarsParser2.vars;\n\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(function (schemeKey) {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    var contextValue = React.useMemo(function () {\n      return {\n        mode: mode,\n        systemMode: systemMode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      };\n    }, [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: _defineProperty({}, colorSchemeSelector, rootCss)\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  var defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultMode: designSystemMode,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","designSystemShouldSkipGeneratingVar","shouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","calculatedMode","calculatedColorScheme","prefix","rootCss","css","rootVars","vars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["C:/Games/marvel/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n    const {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n        return defaultMode;\n      }\n      return mode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}